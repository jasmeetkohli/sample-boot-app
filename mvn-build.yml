
.maven-release-build:
   script:
   #- mvn properties:write-project-properties
   #- if grep "SNAPSHOT" resolved.properties; then echo "Cannot release with SNAPSHOT version(s) of dependencies pom" && exit 1; fi
   # invoke maven-release-plugin to perform release - create git tag, bump up the artifact version, upload war to artifactory
   - set -x
#   - git config --global user.name "jasmeetkohlisingh"
#   - git config --global user.email "jasmeetkohlisingh@gmail.com"
   # Add ssh key to ssh config to connect to git repo as gitlab
#   - eval $(ssh-agent -s)
#   - ssh-add <(echo "$GITLAB_RSA")
#   - mkdir p ~/.ssh && ssh-keyscan -t rsa gitlab.com > ~/.ssh/known_hosts
#   - cd $(mktemp -d)
   # by default gitlab runner works on detatched head. This prevents commits back to the repo (that are part of release:prepare).
   # therefore, clone and checkout the branch before starting release:prepare
#   - git clone ${CI_REPOSITORY_URL} ${CI_PROJECT_NAME} && cd ${CI_PROJECT_NAME}
#   - git checkout ${CI_COMMIT_REF_NAME}
   # Now begin the actual maven release steps.
   # Check if re-deployed
   - echo "CI_COMMIT_REF_NAME => $CI_COMMIT_REF_NAME"
   - |
     if [ "hello" == "world" ]; then
       echo " works";
     else
       echo "yes, works";
     fi 
   - |
     if [ "$CI_COMMIT_REF_NAME" == "master" ] then;
      mvn -B -Dresume=false -DscmCommentPrefix='[skip ci] ' release:prepare;
     else
      mvn -B -Dresume=false -DscmCommentPrefix='[skip ci] ' release:prepare;
     fi
   - grep "^project.rel.*" release.properties | cut -d "=" -f 2 > "$CI_PROJECT_DIR/${RELEASE_VERSION}"
   - git rev-parse HEAD > "$CI_PROJECT_DIR/${RELEASE_SHA}"
   # - mvn release:perform -Dmaven.site.skip=true -Dgoals=deploy
   # make the release war available as an artifact for dependendent downstream stages
   #- mkdir -p $CI_PROJECT_DIR/target; cp target/checkout/profiles-server/target/*.war $CI_PROJECT_DIR/target